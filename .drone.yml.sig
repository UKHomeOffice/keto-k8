eyJhbGciOiJIUzI1NiJ9.LS0tCndvcmtzcGFjZToKICBiYXNlOiAvZ28KICBwYXRoOiBzcmMvZ2l0aHViLmNvbS8ke0RST05FX1JFUE99CgpwaXBlbGluZToKICB0ZXN0OgogICAgaW1hZ2U6IGdvbGFuZzoxLjgKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBta2RpciAtcCAvZ28vYmluCiAgICAgIC0gImN1cmwgLXMgaHR0cHM6Ly9nbGlkZS5zaC9nZXQgfCBzaCIKICAgICAgLSBnbGlkZSBpbnN0YWxsCiAgICAgICMgV2UgaGF2ZSBzb21lIHBhdGNoZWQgZmlsZXMgdG8gdXNlIHRoaXMgc3VjY2Vzc2Z1bGx5IC0gdW50aWwgUFIncyBpbgogICAgICAtIGdpdCBjaGVja291dCB2ZW5kb3IvazhzLmlvL2t1YmVybmV0ZXMvY21kL2t1YmVhZG0KICAgICAgLSBnbyBnZXQgLXUgZ2l0aHViLmNvbS9nb2xhbmcvbGludC9nb2xpbnQKICAgICAgLSBnb2xpbnQgJChnbyBsaXN0IC4vLi4uIHwgZ3JlcCAtdiAvdmVuZG9yIHwgZ3JlcCAtdiAvbW9ja3MpCiAgICAgIC0gZ28gdmV0ICQoZ28gbGlzdCAuLy4uLiB8IGdyZXAgLXYgL3ZlbmRvcikKICAgICAgLSBnbyBnZXQgZ2l0aHViLmNvbS92ZWt0cmEvbW9ja2VyeS8uLi4vCiAgICAgICMgV2UgbmVlZCBrdWJlYWRtIGFuZCBkb2NrZXIgZm9yIGludGVncmF0aW9uIHRlc3RzCiAgICAgIC0gLi9iaW4vZG9ja2VyX2ltYWdlX2Rvd25sb2Fkcy5zaAogICAgICAtIC4vYmluL2luc3RhbGxfZG9ja2VyX2NsaWVudC5zaAogICAgICAtIGdvIGdlbmVyYXRlICQoZ28gbGlzdCAuLy4uLiB8IGdyZXAgLXYgL3ZlbmRvcikKICAgICAgLSBnbyB0ZXN0IC1jb3ZlciAkKGdvIGxpc3QgLi8uLi4gfCBncmVwIC12IC92ZW5kb3IpCiAgICAgIC0gZ28gYnVpbGQgJChnbyBsaXN0IC4vLi4uIHwgZ3JlcCAtdiAvdmVuZG9yKQogICAgICAtIENHT19FTkFCTEVEPTAgZ28gYnVpbGQgLWEgLXYgZ2l0aHViLmNvbS8ke0RST05FX1JFUE99L2NtZC9rbW0KCiAgZG9ja2VyX2J1aWxkOgogICAgaW1hZ2U6IGRvY2tlcjoxLjEyCiAgICBlbnZpcm9ubWVudDoKICAgICAgLSBET0NLRVJfSE9TVD10Y3A6Ly8xMjcuMC4wLjE6MjM3NQogICAgY29tbWFuZHM6CiAgICAgIC0gZG9ja2VyIGJ1aWxkIC10IGltYWdlIC4KCiAgZG9ja2VyX3F1aWNrX3Rlc3Q6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgcnVuIC1pIGltYWdlIC0taGVscAoKICBkb2NrZXJfZTJlX3Rlc3Q6CiAgICBpbWFnZTogcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tldG8tazgtZTJlOmxhdGVzdAogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gS0VUT19LOF9JTUFHRT1xdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2V0by1rODoke0RST05FX0NPTU1JVF9TSEF9CiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICB2b2x1bWVzOgogICAgICAtIC92YXIvcnVuL2RvY2tlci5zb2NrOi92YXIvcnVuL2RvY2tlci5zb2NrCiAgICBjb21tYW5kczoKICAgICAgLSAuL3Rlc3RzL2RvY2tlcl9zYXZlX2FuZF9sb2FkLnNoIHRjcDovLzEyNy4wLjAuMToyMzc1IGltYWdlICR7S0VUT19LOF9JTUFHRX0KICAgICAgLSAuL3Rlc3RzL2UyZS5zaAogICAgd2hlbjoKICAgICAgZXZlbnQ6IFtwdWxsX3JlcXVlc3RdCgogIGltYWdlX3RvX3F1YXk6CiAgICBpbWFnZTogZG9ja2VyOjEuMTIKICAgIGVudmlyb25tZW50OgogICAgICAtIERPQ0tFUl9IT1NUPXRjcDovLzEyNy4wLjAuMToyMzc1CiAgICBjb21tYW5kczoKICAgICAgLSBkb2NrZXIgbG9naW4gLXU9InVraG9tZW9mZmljZWRpZ2l0YWwrZHJvbmVfa2V0b19rOCIgLXA9JHtET0NLRVJfUEFTU1dPUkR9IHF1YXkuaW8KICAgICAgLSBkb2NrZXIgdGFnIGltYWdlIHF1YXkuaW8vdWtob21lb2ZmaWNlZGlnaXRhbC9rZXRvLWs4OiR7RFJPTkVfQ09NTUlUX1NIQX0KICAgICAgLSBkb2NrZXIgcHVzaCBxdWF5LmlvL3VraG9tZW9mZmljZWRpZ2l0YWwva2V0by1rODoke0RST05FX0NPTU1JVF9TSEF9CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAoKICB0YWdfaW1hZ2VfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZV9rZXRvX2s4IiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgaW1hZ2UgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tldG8tazg6JHtEUk9ORV9UQUd9CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tldG8tazg6JHtEUk9ORV9UQUd9CiAgICB3aGVuOgogICAgICBldmVudDogdGFnCgogIHVwZGF0ZV9sYXRlc3RfdG9fcXVheToKICAgIGltYWdlOiBkb2NrZXI6MS4xMgogICAgZW52aXJvbm1lbnQ6CiAgICAgIC0gRE9DS0VSX0hPU1Q9dGNwOi8vMTI3LjAuMC4xOjIzNzUKICAgIGNvbW1hbmRzOgogICAgICAtIGRvY2tlciBsb2dpbiAtdT0idWtob21lb2ZmaWNlZGlnaXRhbCtkcm9uZV9rZXRvX2s4IiAtcD0ke0RPQ0tFUl9QQVNTV09SRH0gcXVheS5pbwogICAgICAtIGRvY2tlciB0YWcgaW1hZ2UgcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tldG8tazg6bGF0ZXN0CiAgICAgIC0gZG9ja2VyIHB1c2ggcXVheS5pby91a2hvbWVvZmZpY2VkaWdpdGFsL2tldG8tazg6bGF0ZXN0CiAgICB3aGVuOgogICAgICBldmVudDogcHVzaAogICAgICBicmFuY2g6IG1hc3RlcgoKc2VydmljZXM6CiAgZGluZDoKICAgIGltYWdlOiBkb2NrZXI6MS4xMi1kaW5kCiAgICBwcml2aWxlZ2VkOiB0cnVlCiAgICBjb21tYW5kOgogICAgICAtICItcyIKICAgICAgLSAib3ZlcmxheSIK.rDyVGmXF3XNEqcdjTbYdUXLRQlBIYRHfKTkeQMGt-5s